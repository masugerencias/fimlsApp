1111111111111111111111111111
Lo primero de todo es requerir express
La inicializamos const app...



22222222222222222222222222222222
Levantamos el servidor en el port 3000, con una 
funcion anonima: app.listen

3333333333333333333333333333333333
Ya podemos provbar nuestra primera ruta */


444444444444444444444444444444
 Ya volvemos a bodyparser , 
Básicamente, lo que body-parser es lo que permite
 a Express leer el cuerpo y luego analizarlo en un 
 objeto Json que podamos entender.*/
 /* Despues de requerir body parser hay que hacer algunas configuariocnes:
 lanzar un middleware con la funcion json:
 app.use(bodyParser.json()) 

 Tambien hay que poner con eso la codifuicacion de URL:
 app.use(bodyParser.urlencoded({ extended: true }))

 YA ESTA!
 ***************************************************************


 BBDD BBDD BBDD BBDD BBDD BBDD BBDD BBDD BBDD BBDD BBDD BBDD BBDD BBDD BBDD BBDD BBDD BBDD BBDD BBDD BBDD 

 1
 create database films 

 2
 crear un JS de DB
 
 2.1 requiero a sequelize
 2.2 Creo un (instancia) new Sequelize('nombreBBDD', 'usario', 'contrasena', {
        (objeto con varias cosas)
        host:'localhost',
        dialect:'mysql'
 })

CREAR MODELO  CREAR MODELO SEQUELIZE CREAR MODELO SEQUELIZE CREAR MODELO SEQUELIZE
 3.1 
 Para levantar la BBDD necesito modelos.
 Creando una carpeta MODELS y dentro para cada tabla un archivo js.
 Archivo js llamado films en plural donde voy a almacenar mis pelis.


3.2
 Lo primero es EXPORTAR una funcion quie reutilizare para los modelos de sequelize.
 Exporto la propia instancia de sequelize (pero en minusculas), y tambien type y se cierra parentesis y funcion flecha => para saber que tipo de datos va a tener cada campo.

 Ponemos un return con: sequelize.define()
 Dentro del define ponemos ponemos el nombre de la primera tabla que vamos a generar EN SINGULAR.
 (porque aun no hay ninguna definida.)
 Y luego un objeto con los camps que vamos a generar: 
 , {
    id: {
            type: type.INTEGER,
            primaryKey: true,
            autoIncrement:true
    },
    title:type.SRING,
    description: type.STRING
    }
 }
 Asi sucesivamente.

 UNa vez el modelo definido el modelo de la tabla, ahora me lo tengo que lelvar a mi fichero de base de datos 
 Para cargarlo y que genere la tabla para yo no tener que entrar ni siquiera en la DDBB.


4444444444444444444444444444444
En el archivo db.js tngo que traer el modelo creado:
Creando una cosntante requiriendoola con la ruta.
Y lanzar la funcion, igualandola a una cosntante el modelo de la tabla y pasandole un par de parametros:
const Film = FilmModel(sequelize, Sequelize)

El primer sequelize es la constante del objeto de la base de datos con su contraseña, etc...
Y el segundo es Sequelize den mayusc de la libreria de sequilize instalada.

Creo que siempre que es en mayuscula es de la libreria npm.
Hasta aqui ya tengo mi modelo Film (que se requiere del archivo de la caprtea de modelos) el cual puedo sincronizar con mi BBDD. 
Porque aun no se ha generado el modelo en Workbench.

sequelize.sync({ force: false})
.then( () => {
    console.log('ya se ha sincronizado la tabla en tu BBDD)
})


exportar para utilizar fuera los objetos que neceite, aqui solo es Film.
Esta sintaxis aprenderla joder, require y module.exports

module.exports = {
    Film
}

Esto lo requiero en mi index por arriba:
require('./ruta de la bd.js)

Ya puedo probar en workbench la tabla e instertar datos y todo.






YA ESTÁ


AHORA RUTAS PARA ACCEDER A LOS DINSTNTOS datos
/api/films -> get que nos recupera todas las piliculas
/api/films -> POST   crea
PUT
DELETE

CRUD ENTERO


api/users/login


Creamos una cartpeta routes, archivo rout, 
En este archivo queremos hacer el crud para que nos devuelva datos en JSON.





MANEJADOR DE RUTAS
1- Requerir express junto con un metodo Router();
    const router = require('express').Router();
    Y exportar a su vez eso tambien: module.exports = router;
Y ya está configurado, ahora hay que ir a INDEX.JS para hacer el enroutamiento:


importar el archivo de rout igualandolo a una cosntante. Creo que siempre se importa igualandolo a una constante.

Ya está, ahora en el fichero prinipal, index.js. 
Es donde me van a venir las peticiones, y tngo que poner que vayan a otro lado, 
a sus respectivos manejadores. 

app.use('/api',apiRouter);

Aqui estoy diciendo que todas las peticiones con /api me lo va a gestional el fichero
llamado apiRouter (llamado asi en este index.js, porque en routes se llama solo api.)
Asi que las peticiones api irán a la capeta routs y al doc api.
Reformulo : el archivo API en routes es porque ese archivo va a renderizar
todas las rutas que tengan que ver con la API, podria hacer otro archivo de vistas 
para que hiciera lo mismo pero solo con las vistas. 


